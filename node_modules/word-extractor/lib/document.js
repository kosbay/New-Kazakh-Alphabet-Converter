// Generated by CoffeeScript 1.10.0
var Document, filters,
  slice = [].slice;

filters = require('./filters');

Document = (function() {
  var filter, getPieceIndex;

  function Document() {
    this.pieces = [];
    this.bookmarks = {};
    this.boundaries = {};
  }

  getPieceIndex = function(pieces, position) {
    var i, j, len, piece;
    for (i = j = 0, len = pieces.length; j < len; i = ++j) {
      piece = pieces[i];
      if (position <= piece.endPosition) {
        return i;
      }
    }
  };

  Document.prototype.getTextRange = function(start, end) {
    var endPiece, i, j, piece, pieces, ref, ref1, result, startPiece, xend, xstart;
    pieces = this.pieces;
    startPiece = getPieceIndex(pieces, start);
    endPiece = getPieceIndex(pieces, end);
    result = [];
    for (i = j = ref = startPiece, ref1 = endPiece; j <= ref1; i = j += 1) {
      piece = pieces[i];
      xstart = i === startPiece ? start - piece.position : 0;
      xend = i === endPiece ? end - piece.position : piece.endPosition;
      result.push(piece.text.substring(xstart, xend));
    }
    return result.join("");
  };

  filter = function(text, shouldFilter) {
    var matcher, replacer;
    if (!shouldFilter) {
      return text;
    }
    replacer = function() {
      var match, replaced, rest;
      match = arguments[0], rest = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      if (match.length === 1) {
        replaced = filters[match.charCodeAt(0)];
        if (replaced === 0) {
          return "";
        } else {
          return replaced;
        }
      } else if (rest.length === 2) {
        return "";
      } else if (rest.length === 3) {
        return rest[0];
      }
    };
    matcher = /(?:[\x02\x05\x07\x08\x0a\x0d\u2018\u2019\u201c\u201d\u2002\u2003\u2012\u2013\u2014]|\x13(?:[^\x14]*\x14)?([^\x15]*)\x15)/g;
    return text.replace(matcher, replacer);
  };

  Document.prototype.getBody = function(shouldFilter) {
    var start, string;
    if (shouldFilter == null) {
      shouldFilter = true;
    }
    start = 0;
    string = this.getTextRange(start, start + this.boundaries.ccpText);
    return filter(string, shouldFilter);
  };

  Document.prototype.getFootnotes = function(shouldFilter) {
    var start, string;
    if (shouldFilter == null) {
      shouldFilter = true;
    }
    start = this.boundaries.ccpText;
    string = this.getTextRange(start, start + this.boundaries.ccpFtn);
    return filter(string, shouldFilter);
  };

  Document.prototype.getHeaders = function(shouldFilter) {
    var start, string;
    if (shouldFilter == null) {
      shouldFilter = true;
    }
    start = this.boundaries.ccpText + this.boundaries.ccpFtn;
    string = this.getTextRange(start, start + this.boundaries.ccpHdd);
    return filter(string, shouldFilter);
  };

  Document.prototype.getAnnotations = function(shouldFilter) {
    var start, string;
    if (shouldFilter == null) {
      shouldFilter = true;
    }
    start = this.boundaries.ccpText + this.boundaries.ccpFtn + this.boundaries.ccpHdd;
    string = this.getTextRange(start, start + this.boundaries.ccpAtn);
    return filter(string, shouldFilter);
  };

  return Document;

})();

module.exports = Document;
